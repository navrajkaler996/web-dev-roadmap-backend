// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id       Int    @id @default(autoincrement())
//   email    String @unique
//   password String
//   salt     String
// }

model Course {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  started   Boolean
  completed Boolean

  topics Topic[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  CourseCompleted CourseCompleted[]
  CourseStarted   CourseStarted[]
}

model Topic {
  id    Int    @id @default(autoincrement())
  name  String
  level String

  courseId Int
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model User {
  userId           Int               @id @default(autoincrement())
  firstName        String
  email            String            @unique
  password         String
  coursesStarted   CourseStarted[]
  coursesCompleted CourseCompleted[]
}

model CourseStarted {
  courseStartedId Int    @id @default(autoincrement())
  userId          Int
  courseId        Int
  User            User?  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Course          Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseCompleted {
  courseCompletedId Int    @id @default(autoincrement())
  userId            Int
  courseId          Int
  User              User?  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Course            Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}
